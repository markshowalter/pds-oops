################################################################################
# oops/inst/juno/junocam.py
################################################################################

from IPython import embed

import os
import numpy as np
import julian
from PIL import Image
import pdstable
import pdsparser
import json
import cspyce
import oops

from oops.inst.juno.juno_ import Juno
from oops import TWOPI

################################################################################
# Standard class methods
################################################################################

#=============================================================================
# from_file
#=============================================================================
def from_file(filespec, fast=False, return_all_planets=False):
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    """
    A general, static method to return an Observation object based on a given
    Juno JUNOCAM image file.

    Inputs:
        filespec        The full path to a JUNOCAM png image file.

        return_all_planets  Include kernels for all planets not just
                            Jupiter or Saturn.
    """
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    JUNOCAM.initialize()   # Define everything the first time through; use defaults
                           # unless initialize() is called explicitly.

    #-----------------------------------------------------------
    # Load the json label 
    #-----------------------------------------------------------
    lbl_filespec = filespec.replace("-raw.png", ".json")
    f = open(lbl_filespec)
    label = json.load(f)
    f.close

    #-----------------------------------------------------------
    # Get image info 
    #-----------------------------------------------------------
    info = Info(label)

    #-----------------------------------------------------------
    # Load SPICE kernels 
    #-----------------------------------------------------------
    Juno.load_cks(info.tstart0, info.tstart0 + 3600.)
    Juno.load_spks(info.tstart0, info.tstart0 + 3600.)

    #------------------------------------------------------------------
    # Load the data array as separate framelets, with associated info
    #------------------------------------------------------------------
    (framelets, tstarts, filters) = _load_data(filespec, info)

    #-----------------------------------
    # Define the FOV
    #-----------------------------------
    uv_scale = info.fov_width/info.nsamples
    uv_shape = oops.Pair((info.nsamples, info.frlines))
    fov = oops.fov.FlatFOV([uv_scale,uv_scale], uv_shape,     uv_los=[info.nsamples/2, 1080])
#    embed()
#    (shape, frame, bsight, bounds) = cspyce.getfov(-61501)
    
    #-----------------------------------------
    # Construct a Snapshot for each framelet
    #-----------------------------------------
# TODO: Pushframe observation class
# TODO: distortion
# TODO: los offset for each filter
# TODO: trim framelet edges
# TODO: exp time for each pixel given TDI 
    obs = []
    for i in range(info.nframelets):
        item = (oops.obs.Snapshot(("v","u"), 
                                 tstarts[i], info.texp, fov,
                                 "JUNO", "JUNO_JUNOCAM", 
                                 instrument = "JUNOCAM",
                                 filter = filters[i], 
                                 data = framelets[:,:,i]))
#        item.insert_subfield('spice_kernels', \
#		   Juno.used_kernels(item.time, 'junocam', return_all_planets))
        obs.append(item)


    return obs
#=============================================================================



#=============================================================================
# _combine_framelets
#=============================================================================
def _combine_framelets(info, framelets):
    """Combines snapshot framelets into a 2D image

    Input:
        info            Image info object.
	framelets       Framelets in (line,sample,framelet #)

    Return:             image
        image           Resulting image in (line, sample).
    """
    
    image = np.empty([info.frlines*info.nframelets,info.nsamples])

    for i in range(info.nframelets):
       image[info.frlines*i: info.frlines*(i+1),:] = framelets[:,:,i]

    return image
#=============================================================================



#=============================================================================
# _load_data
#=============================================================================
def _load_data(filespec, info):
    """Loads the data array from the file and splits into individual framelets. 

    Input:
        filespec        Full path to the data file.
        info            Image info object.

    Return:             (framelets, tstarts, filters)
        framelets       A Numpy array containing the individual frames in 
                        axis order (line, sample, framelet #).
        tstarts         A Numpy array containing the start time for each frame.
        filters         List giving the filter name for each frame.
    """
    
    #--------------------------------------------------------
    # Read data 
    #--------------------------------------------------------
    img = Image.open(filespec)  
    data = np.asarray(img)

    #--------------------------------------------------------
    # Split data array into framelets
    #--------------------------------------------------------
    framelets = np.empty([info.frlines,info.nsamples,info.nframelets])
    tstarts = np.empty([info.nframelets])
    filters = []
    
    delta_red = cspyce.gdpool("INS-61503_INTERFRAME_DELTA")[0]
    bias_red = cspyce.gdpool("INS-61503_START_TIME_BIAS")[0]
    delta_grn = cspyce.gdpool("INS-61502_INTERFRAME_DELTA")[0]
    bias_grn = cspyce.gdpool("INS-61502_START_TIME_BIAS")[0]
    delta_blu = cspyce.gdpool("INS-61501_INTERFRAME_DELTA")[0]
    bias_blu = cspyce.gdpool("INS-61501_START_TIME_BIAS")[0]
    delta_mth = cspyce.gdpool("INS-61504_INTERFRAME_DELTA")[0]
    bias_mth = cspyce.gdpool("INS-61504_START_TIME_BIAS")[0]

    delta = {"RED":delta_red, 
             "GREEN":delta_grn, 
             "BLUE": delta_blu, 
             "METHANE":delta_mth}
    bias = {"RED":bias_red, 
            "GREEN":bias_grn, 
            "BLUE": bias_blu, 
            "METHANE":bias_mth}
	    
    nf = len(info.filter_name)
    
    for i in range(info.nframelets):
	framelets[:,:,i] = data[info.frlines*i:info.frlines*(i+1),:]

        filter = info.filter_name[i%nf]
        filters.append(filter)

        tinter = info.tinter0 + delta[filter]

        tstarts[i] = info.tstart0 + bias[filter] + i//nf*(info.texp + tinter)
	
	
	
    return (framelets, tstarts, filters)
#=============================================================================



#=============================================================================
# _load_data
#=============================================================================
def __load_data(filespec, info):
    """Loads the data array from the file and splits into individual framelets. 

    Input:
        filespec        Full path to the data file.
        info            Image info object.

    Return:             (data, times)
        data_red        A Numpy array containing the red-filter framelets in axis 
                        order (line, sample, framelet #).
        data_grn        A Numpy array containing the green-filter framelets in axis 
                        order (line, sample, framelet #).
        data_blu        A Numpy array containing the blue-filter framelets in axis 
                        order (line, sample, framelet #).
    """
    
    #--------------------------------------------------------
    # Read data 
    #--------------------------------------------------------
    img = Image.open(filespec)  
    data = np.asarray(img)

    #--------------------------------------------------------
    # Split data array into filters
    #--------------------------------------------------------
    framelets_red = np.empty([info.frlines,info.nsamples,info.nframelets])
    framelets_grn = np.empty([info.frlines,info.nsamples,info.nframelets])
    framelets_blu = np.empty([info.frlines,info.nsamples,info.nframelets])
    rr = 0; gg = 1; bb = 2    

    for i in range(info.nframelets):
	framelets_red[:,:,i] = data[info.frlines*(3*i+rr):info.frlines*(3*i+rr+1),:]
	framelets_grn[:,:,i] = data[info.frlines*(3*i+gg):info.frlines*(3*i+gg+1),:]
	framelets_blu[:,:,i] = data[info.frlines*(3*i+bb):info.frlines*(3*i+bb+1),:]
	
    return (framelets_red, framelets_grn, framelets_blu)

    #--------------------------------------------------------
    # combine framelets for each filter
    #--------------------------------------------------------
    data_red = _combine_framelets(info, framelets_red) 
    data_grn = _combine_framelets(info, framelets_grn) 
    data_blu = _combine_framelets(info, framelets_blu) 


    return (data_red, data_grn, data_blu)
#=============================================================================



#=============================================================================
# parse_units
#=============================================================================
def parse_units(string):
    """Parses a JUNOCAM label string into value and units. 

    Input:
        string          String value from the label.

    Return:             (value, units)
        value           Numeric value.
        units           Units string.
    """
    
    left = string.find("<")
    right = string.find(">")
    
    value = float(string[0:left-1])
    units  = string[left+1:right]
    
    return (value, units)
#=============================================================================



#*****************************************************************************
# Info class
#*****************************************************************************
class Info(object):

    #=====================================================================
    # __init__
    #=====================================================================
    def __init__(self, label):
        """Uses the label to assemble the image info.

        Input:
            label           The label dictionary.

        Attributes:         
            nlines          A Numpy array containing the data in axis order
                            (line, sample, band).
            nsamples        The time sampling array in (line, sample) axis order, or
                            None if no time backplane is found in the file.
            nframelets         

        """
    
        self.nlines = label["LINES"]
        self.nsamples = label["LINE_SAMPLES"]
        self.frlines = 128
        self.nframelets = self.nlines/self.frlines

        (self.tinter0, _) = parse_units(label["INTERFRAME_DELAY"])

	self.tstart0 = \
	        julian.tdb_from_tai(julian.tai_from_iso(label["START_TIME"]))

        (texp_ms, _) = parse_units(label["EXPOSURE_DURATION"])
	self.texp = texp_ms/1000.
	
        self.fov_width = 58. * TWOPI/180.

        self.filter_name = label["FILTER_NAME"]

#*****************************************************************************



#*****************************************************************************
# JUNOCAM object
#*****************************************************************************
class JUNOCAM(object):
    """An instance-free class to hold Juno JUNOCAM instrument parameters."""

    initialized = False

    #=======================================================================
    # initialize
    #=======================================================================
    @staticmethod
    def initialize(ck='reconstructed', planets=None, asof=None,
                   spk='reconstructed', gapfill=True,
                   mst_pck=True, irregulars=True):
        """Fills in key information about the VIS and IR channels.

        Must be called first. After the first call, later calls to this function
        are ignored.

        Input:
            ck,spk      'predicted', 'reconstructed', or 'none', depending on
                        which kernels are to be used. Defaults are
                        'reconstructed'. Use 'none' if the kernels are to be
                        managed manually.
            planets     A list of planets to pass to define_solar_system. None
                        or 0 means all.
            asof        Only use SPICE kernels that existed before this date;
                        None to ignore.
            gapfill     True to include gapfill CKs. False otherwise.
            mst_pck     True to include MST PCKs, which update the rotation
                        models for some of the small moons.
            irregulars  True to include the irregular satellites;
                        False otherwise.
        """

        # Quick exit after first call
        if JUNOCAM.initialized: return

        Juno.initialize(ck=ck, planets=planets, asof=asof, spk=spk,
                        gapfill=gapfill,
                        mst_pck=mst_pck, irregulars=irregulars)
        Juno.load_instruments(asof=asof)

        # Construct a SpiceFrame for each detector
        ignore = oops.frame.SpiceFrame("JUNO_JUNOCAM")

        JUNOCAM.initialized = True
    #=======================================================================



    #=======================================================================
    # reset
    #=======================================================================
    @staticmethod
    def reset():
        """Resets the internal JUNOCAM parameters. Can be useful for
        debugging."""

        JUNOCAM.initialized = False

        Juno.reset()
    #=======================================================================

#*****************************************************************************


